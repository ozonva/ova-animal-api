// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnimalApiClient is the client API for AnimalApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnimalApiClient interface {
	CreateEntity(ctx context.Context, in *Animal, opts ...grpc.CallOption) (*empty.Empty, error)
	DescribeEntity(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Animal, error)
	ListEntities(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AnimalListResponse, error)
	RemoveEntity(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type animalApiClient struct {
	cc grpc.ClientConnInterface
}

func NewAnimalApiClient(cc grpc.ClientConnInterface) AnimalApiClient {
	return &animalApiClient{cc}
}

func (c *animalApiClient) CreateEntity(ctx context.Context, in *Animal, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ova.animal.api.AnimalApi/CreateEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animalApiClient) DescribeEntity(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Animal, error) {
	out := new(Animal)
	err := c.cc.Invoke(ctx, "/ova.animal.api.AnimalApi/DescribeEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animalApiClient) ListEntities(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AnimalListResponse, error) {
	out := new(AnimalListResponse)
	err := c.cc.Invoke(ctx, "/ova.animal.api.AnimalApi/ListEntities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animalApiClient) RemoveEntity(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ova.animal.api.AnimalApi/RemoveEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnimalApiServer is the server API for AnimalApi service.
// All implementations must embed UnimplementedAnimalApiServer
// for forward compatibility
type AnimalApiServer interface {
	CreateEntity(context.Context, *Animal) (*empty.Empty, error)
	DescribeEntity(context.Context, *IdRequest) (*Animal, error)
	ListEntities(context.Context, *empty.Empty) (*AnimalListResponse, error)
	RemoveEntity(context.Context, *IdRequest) (*empty.Empty, error)
	mustEmbedUnimplementedAnimalApiServer()
}

// UnimplementedAnimalApiServer must be embedded to have forward compatible implementations.
type UnimplementedAnimalApiServer struct {
}

func (UnimplementedAnimalApiServer) CreateEntity(context.Context, *Animal) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntity not implemented")
}
func (UnimplementedAnimalApiServer) DescribeEntity(context.Context, *IdRequest) (*Animal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeEntity not implemented")
}
func (UnimplementedAnimalApiServer) ListEntities(context.Context, *empty.Empty) (*AnimalListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntities not implemented")
}
func (UnimplementedAnimalApiServer) RemoveEntity(context.Context, *IdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveEntity not implemented")
}
func (UnimplementedAnimalApiServer) mustEmbedUnimplementedAnimalApiServer() {}

// UnsafeAnimalApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnimalApiServer will
// result in compilation errors.
type UnsafeAnimalApiServer interface {
	mustEmbedUnimplementedAnimalApiServer()
}

func RegisterAnimalApiServer(s grpc.ServiceRegistrar, srv AnimalApiServer) {
	s.RegisterService(&AnimalApi_ServiceDesc, srv)
}

func _AnimalApi_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Animal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimalApiServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.animal.api.AnimalApi/CreateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimalApiServer).CreateEntity(ctx, req.(*Animal))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimalApi_DescribeEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimalApiServer).DescribeEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.animal.api.AnimalApi/DescribeEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimalApiServer).DescribeEntity(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimalApi_ListEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimalApiServer).ListEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.animal.api.AnimalApi/ListEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimalApiServer).ListEntities(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimalApi_RemoveEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimalApiServer).RemoveEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.animal.api.AnimalApi/RemoveEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimalApiServer).RemoveEntity(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnimalApi_ServiceDesc is the grpc.ServiceDesc for AnimalApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnimalApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ova.animal.api.AnimalApi",
	HandlerType: (*AnimalApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEntity",
			Handler:    _AnimalApi_CreateEntity_Handler,
		},
		{
			MethodName: "DescribeEntity",
			Handler:    _AnimalApi_DescribeEntity_Handler,
		},
		{
			MethodName: "ListEntities",
			Handler:    _AnimalApi_ListEntities_Handler,
		},
		{
			MethodName: "RemoveEntity",
			Handler:    _AnimalApi_RemoveEntity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/animal.proto",
}

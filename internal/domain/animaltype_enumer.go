// Code generated by "enumer -type=AnimalType -json"; DO NOT EDIT.

//
package domain

import (
	"encoding/json"
	"fmt"
)

const _AnimalTypeName = "UNKNOWNCATDOGFISHMOUSE"

var _AnimalTypeIndex = [...]uint8{0, 7, 10, 13, 17, 22}

func (i AnimalType) String() string {
	if i >= AnimalType(len(_AnimalTypeIndex)-1) {
		return fmt.Sprintf("AnimalType(%d)", i)
	}
	return _AnimalTypeName[_AnimalTypeIndex[i]:_AnimalTypeIndex[i+1]]
}

var _AnimalTypeValues = []AnimalType{0, 1, 2, 3, 4}

var _AnimalTypeNameToValueMap = map[string]AnimalType{
	_AnimalTypeName[0:7]:   0,
	_AnimalTypeName[7:10]:  1,
	_AnimalTypeName[10:13]: 2,
	_AnimalTypeName[13:17]: 3,
	_AnimalTypeName[17:22]: 4,
}

// AnimalTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AnimalTypeString(s string) (AnimalType, error) {
	if val, ok := _AnimalTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AnimalType values", s)
}

// AnimalTypeValues returns all values of the enum
func AnimalTypeValues() []AnimalType {
	return _AnimalTypeValues
}

// IsAAnimalType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AnimalType) IsAAnimalType() bool {
	for _, v := range _AnimalTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for AnimalType
func (i AnimalType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AnimalType
func (i *AnimalType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AnimalType should be a string, got %s", data)
	}

	var err error
	*i, err = AnimalTypeString(s)
	return err
}
